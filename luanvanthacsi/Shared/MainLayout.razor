@using luanvanthacsi.Data.Services;
@using luanvanthacsi.Models;
@using luanvanthacsi.Ultils;
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject BrowserService _browserService

<PageTitle>Hệ thống bảo vệ luận văn Thạc sĩ</PageTitle>

<CascadingValue Value="sessionData">

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 auth">
            <LoginDisplay />
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>
</CascadingValue>

@code {

    [Inject] IUserService UserService { get; set; }
    [Inject] AuthenticationStateProvider _authenticationStateProvider { get; set; }

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    SessionData sessionData = new SessionData();
    DotNetObjectReference<BrowserService> browserServiceRef;

    protected async override Task OnInitializedAsync()
    {
        //string id = await getUserId();
        _browserService.WindowSizeChanged += e => WindowSizeChanged(e);
        browserServiceRef = DotNetObjectReference.Create(_browserService);
        var user = (await AuthStat).User;
        if (user == null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"Identity/Account/Login");
        }
        else
        {
            var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            sessionData.CurrentUser = await UserService.GetUserByIdAsync(UserId);
        }
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            WindowSizeChanged(await _browserService.GetDimensions());
            await _browserService.BindBrowserDimensionChange(browserServiceRef);
        }
    }

    void WindowSizeChanged(BrowserDimension dimension)
    {
        sessionData.BrowserDimension = dimension;
        StateHasChanged();
    }

    async Task<string> getUserId()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return UserId;
    }


}
